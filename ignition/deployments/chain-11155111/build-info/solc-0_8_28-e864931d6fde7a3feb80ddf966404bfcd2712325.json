{
  "_format": "hh3-sol-build-info-1",
  "id": "solc-0_8_28-e864931d6fde7a3feb80ddf966404bfcd2712325",
  "solcVersion": "0.8.28",
  "solcLongVersion": "0.8.28+commit.7893614a",
  "userSourceNameMap": {
    "contracts/EventFactory.sol": "project/contracts/EventFactory.sol"
  },
  "input": {
    "language": "Solidity",
    "settings": {
      "evmVersion": "cancun",
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "outputSelection": {
        "*": {
          "": [
            "ast"
          ],
          "*": [
            "abi",
            "evm.bytecode",
            "evm.deployedBytecode",
            "evm.methodIdentifiers",
            "metadata"
          ]
        }
      },
      "remappings": []
    },
    "sources": {
      "project/contracts/EventFactory.sol": {
        "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.28;\r\n\r\ncontract EventFactory {\r\n    struct Event {\r\n        uint id;\r\n        string name;\r\n        string desc;\r\n        string imageURI;\r\n        uint date;\r\n        string venue;\r\n        address organizer;\r\n        uint maxParticipant;\r\n        uint deadline;\r\n        uint totalRevenue;\r\n        bool active;\r\n        address ticketContract;\r\n    }\r\n\r\n    Event[] public events;\r\n    mapping(address => uint[]) public organizerEvents;\r\n\r\n    uint private eventIDCounter;\r\n\r\n    event EventCreated(\r\n        uint indexed eventId,\r\n        string indexed eventName, \r\n        address indexed eventOrganizer, \r\n        uint date, \r\n        address ticketContract\r\n    );\r\n    event EventUpdated(uint indexed eventId, string indexed eventName);\r\n\r\n    modifier onlyOrganizer(uint _eventId) {\r\n        require(events[_eventId].organizer == msg.sender, \"You are not the organizer of this Event!\");\r\n        _;\r\n    }\r\n\r\n    modifier validEventId(uint _eventId) {\r\n        require(_eventId < events.length, \"Invalid eventID!\");\r\n        _;\r\n    }\r\n\r\n    function createEvent(\r\n        string memory _name,\r\n        string memory _desc,\r\n        string memory _imageURI,\r\n        uint _date,\r\n        string memory _venue,\r\n        uint _maxParticipant,\r\n        uint _deadline\r\n    ) public returns (uint eventId) {\r\n        require(bytes(_name).length > 0, \"Invalid Event Name!\");\r\n        require(bytes(_desc).length > 10, \"Event Description must more than 10 chars!\");\r\n        require(bytes(_venue).length > 3, \"Invalid Event Venue!\");\r\n        require(_date > block.timestamp, \"Invalid Event date!\");\r\n        require(_maxParticipant > 0, \"Invalid max participant!\");\r\n        require(_deadline < _date, \"Invalid Event deadline\");\r\n\r\n        Event memory newEvent = Event({\r\n            id: eventIDCounter,\r\n            name: _name,\r\n            desc: _desc,\r\n            imageURI: _imageURI,\r\n            date: _date,\r\n            venue: _venue,\r\n            organizer: msg.sender,\r\n            maxParticipant: _maxParticipant,\r\n            deadline: _deadline,\r\n            totalRevenue: 0,\r\n            active: true,\r\n            ticketContract: address(0)\r\n        });\r\n\r\n        events.push(newEvent);\r\n\r\n        organizerEvents[msg.sender].push(eventIDCounter);\r\n\r\n        emit EventCreated(eventIDCounter, _name, msg.sender, _date, address(0));\r\n\r\n        eventId = eventIDCounter;\r\n        eventIDCounter++;\r\n\r\n        return eventId;\r\n    }\r\n\r\n    function setTicketContract(\r\n        uint256 _eventId,\r\n        address _ticketContract\r\n    ) \r\n        public \r\n        validEventId(_eventId) \r\n        onlyOrganizer(_eventId) \r\n    {\r\n        require(_ticketContract != address(0), \"Invalid contract address\");\r\n        require(\r\n            events[_eventId].ticketContract == address(0),\r\n            \"Ticket contract already set\"\r\n        );\r\n        \r\n        events[_eventId].ticketContract = _ticketContract;\r\n    }\r\n\r\n    function updateEvent(\r\n        uint _eventId,\r\n        string memory _name,\r\n        string memory _desc,\r\n        string memory _imageURI\r\n    ) public onlyOrganizer(_eventId){\r\n        require(bytes(_name).length > 0, \"Invalid name update\");\r\n        require(bytes(_desc).length > 10, \"Invalid description update\");\r\n\r\n        events[_eventId].name = _name;\r\n        events[_eventId].desc = _desc;\r\n        events[_eventId].imageURI = _imageURI;\r\n\r\n        emit EventUpdated(_eventId, _name);\r\n    }\r\n\r\n    function recordRevenue(uint256 _eventId, uint256 _amount) \r\n        external \r\n        validEventId(_eventId) \r\n    {\r\n        require(\r\n            msg.sender == events[_eventId].ticketContract,\r\n            \"Only ticket contract can record revenue\"\r\n        );\r\n        \r\n        events[_eventId].totalRevenue += _amount;\r\n    }\r\n\r\n    // GETTER FUNCTION\r\n    function getAllEvents() public view returns(Event[] memory) {\r\n        return events;\r\n    }\r\n\r\n    function getActiveEvents() public view returns(Event[] memory) {\r\n        uint activeCount = 0;\r\n        for(uint i = 0; i < events.length; i++) {\r\n            if(events[i].active && block.timestamp < events[i].deadline) {\r\n                activeCount++;\r\n            }\r\n        }\r\n\r\n        Event[] memory activeEvents = new Event[](activeCount);\r\n        uint index = 0;\r\n\r\n        for(uint i = 0; i < events.length; i++) {\r\n            if(events[i].active && block.timestamp < events[i].deadline) {\r\n                activeEvents[index] = events[i];\r\n                index++;\r\n            }\r\n        }\r\n\r\n        return activeEvents;\r\n    }\r\n\r\n    function getEventsByOrganizer(address _organizer) public view returns (Event[] memory) {\r\n        uint[] memory eventIds = organizerEvents[_organizer];\r\n        Event[] memory organizerEventDetails = new Event[](eventIds.length);\r\n\r\n        for (uint i = 0; i < eventIds.length; i++) {\r\n            uint eventId = eventIds[i];\r\n            organizerEventDetails[i] = events[eventId];\r\n        }\r\n\r\n        return organizerEventDetails;\r\n    }\r\n\r\n    function getOrganizerEvent(address _organizer) public view returns(uint[] memory) {\r\n        return organizerEvents[_organizer];\r\n    }\r\n\r\n    function getEvent(uint _eventId) public view returns(Event memory) {\r\n        return events[_eventId];\r\n    }\r\n\r\n    function getTotalEvent() public view returns(uint) {\r\n        return events.length;\r\n    }\r\n\r\n    function isEventActive(uint256 _eventId) \r\n        public \r\n        view \r\n        validEventId(_eventId) \r\n        returns (bool) \r\n    {\r\n        Event memory eventData = events[_eventId];\r\n        return eventData.active && \r\n               block.timestamp < eventData.deadline &&\r\n               block.timestamp < eventData.date;\r\n    }\r\n}"
      }
    }
  }
}